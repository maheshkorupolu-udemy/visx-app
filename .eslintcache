[{"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\reportWebVitals.ts":"1","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\layout\\App.tsx":"2","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\covid\\Barstack.tsx":"3","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\index.tsx":"4","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\stores\\rootStore.ts":"5","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\stores\\covidStore.ts":"6","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\api\\agent.ts":"7","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\home\\HomePage.tsx":"8","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\covid\\dashboard\\CovidDashboard.tsx":"9","E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\covid\\dashboard\\CovidDataList.tsx":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":261,"mtime":1607430257506,"results":"13","hashOfConfig":"12"},{"size":7116,"mtime":1607327036106,"results":"14","hashOfConfig":"12"},{"size":511,"mtime":1606808706643,"results":"15","hashOfConfig":"12"},{"size":349,"mtime":1606888566962,"results":"16","hashOfConfig":"12"},{"size":3017,"mtime":1607666432988,"results":"17","hashOfConfig":"12"},{"size":1590,"mtime":1607428807036,"results":"18","hashOfConfig":"12"},{"size":183,"mtime":1607340688350,"results":"19","hashOfConfig":"12"},{"size":752,"mtime":1607450164984,"results":"20","hashOfConfig":"12"},{"size":1120,"mtime":1607431125525,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1bwphl1",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\reportWebVitals.ts",[],["45","46"],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\layout\\App.tsx",[],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\covid\\Barstack.tsx",["47"],"import React, { useContext, useEffect } from \"react\";\r\nimport { BarStack } from \"@visx/shape\";\r\nimport { SeriesPoint } from \"@visx/shape/lib/types\";\r\nimport { Group } from \"@visx/group\";\r\nimport { Grid } from \"@visx/grid\";\r\nimport { AxisBottom } from \"@visx/axis\";\r\nimport cityTemperature, {\r\n  CityTemperature,\r\n} from \"@visx/mock-data/lib/mocks/cityTemperature\";\r\nimport { scaleBand, scaleLinear, scaleOrdinal } from \"@visx/scale\";\r\nimport { timeParse, timeFormat } from \"d3-time-format\";\r\nimport { useTooltip, useTooltipInPortal, defaultStyles } from \"@visx/tooltip\";\r\nimport { LegendOrdinal } from \"@visx/legend\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RootStoreContext } from \"../../stores/rootStore\";\r\n\r\ntype CityName = \"New York\";\r\n\r\ntype TooltipData = {\r\n  bar: SeriesPoint<CityTemperature>;\r\n  key: CityName;\r\n  index: number;\r\n  height: number;\r\n  width: number;\r\n  x: number;\r\n  y: number;\r\n  color: string;\r\n};\r\n\r\nexport type BarStackProps = {\r\n  width: number;\r\n  height: number;\r\n  margin?: { top: number; right: number; bottom: number; left: number };\r\n  events?: boolean;\r\n};\r\n\r\nconst purple1 = \"#6c5efb\";\r\nconst purple2 = \"#c998ff\";\r\nexport const purple3 = \"#a44afe\";\r\nexport const background = \"#eaedff\";\r\nconst defaultMargin = { top: 40, right: 0, bottom: 0, left: 0 };\r\nconst tooltipStyles = {\r\n  ...defaultStyles,\r\n  minWidth: 60,\r\n  backgroundColor: \"rgba(0,0,0,0.9)\",\r\n  color: \"white\",\r\n};\r\n\r\nconsole.log(cityTemperature);\r\n\r\nconst data = cityTemperature.slice(0, 12);\r\nconst keys = Object.keys(data[0]).filter((d) => d !== \"date\") as CityName[];\r\n\r\nconst temperatureTotals = data.reduce((allTotals, currentDate) => {\r\n  const totalTemperature = keys.reduce((dailyTotal, k) => {\r\n    dailyTotal += Number(currentDate[k]);\r\n    return dailyTotal;\r\n  }, 0);\r\n  allTotals.push(totalTemperature);\r\n  return allTotals;\r\n}, [] as number[]);\r\n\r\nconst parseDate = timeParse(\"%Y-%m-%d\");\r\nconst format = timeFormat(\"%b %d\");\r\nconst formatDate = (date: string) => format(parseDate(date) as Date);\r\n\r\n// accessors\r\nconst getDate = (d: CityTemperature) => d.date;\r\n\r\n// scales\r\nconst dateScale = scaleBand<string>({\r\n  domain: data.map(getDate),\r\n  padding: 0.2,\r\n});\r\nconst temperatureScale = scaleLinear<number>({\r\n  domain: [0, Math.max(...temperatureTotals)],\r\n  nice: true,\r\n});\r\nconst colorScale = scaleOrdinal<CityName, string>({\r\n  domain: keys,\r\n  range: [purple1, purple2, purple3],\r\n});\r\n\r\nlet tooltipTimeout: number;\r\n\r\nconst Barstack: React.FC<BarStackProps> = ({\r\n  width,\r\n  height,\r\n  events = false,\r\n  margin = defaultMargin,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    tooltipOpen,\r\n    tooltipLeft,\r\n    tooltipTop,\r\n    tooltipData,\r\n    hideTooltip,\r\n    showTooltip,\r\n  } = useTooltip<TooltipData>();\r\n\r\n  const { containerRef, TooltipInPortal } = useTooltipInPortal();\r\n  const {\r\n    loadTimeLineData,\r\n    loadingIntial,\r\n    timeLineData,\r\n  } = rootStore.covidStore;\r\n\r\n  useEffect(() => {\r\n    loadTimeLineData();\r\n  }, [loadTimeLineData]);\r\n\r\n  if (loadingIntial) return <div>Loading</div>;\r\n\r\n  var arrCurrentYearTimeLineData = timeLineData.filter(\r\n    (f) => new Date(f.date).getFullYear() === 2020\r\n  );\r\n\r\n  timeLineData.forEach((result) => {\r\n    console.log(result.dailyconfirmed);\r\n  });\r\n\r\n  if (width < 10) return null;\r\n  // bounds\r\n  const xMax = width;\r\n  const yMax = height - margin.top - 100;\r\n\r\n  dateScale.rangeRound([0, xMax]);\r\n  temperatureScale.range([yMax, 0]);\r\n\r\n  return width < 10 ? null : (\r\n    // relative position is needed for correct tooltip positioning\r\n    <div style={{ position: \"relative\" }}>\r\n      <svg ref={containerRef} width={width} height={height}>\r\n        <rect\r\n          x={0}\r\n          y={0}\r\n          width={width}\r\n          height={height}\r\n          fill={background}\r\n          rx={14}\r\n        />\r\n        <Grid\r\n          top={margin.top}\r\n          left={margin.left}\r\n          xScale={dateScale}\r\n          yScale={temperatureScale}\r\n          width={xMax}\r\n          height={yMax}\r\n          stroke=\"black\"\r\n          strokeOpacity={0.1}\r\n          xOffset={dateScale.bandwidth() / 2}\r\n        />\r\n        <Group top={margin.top}>\r\n          <BarStack<CityTemperature, CityName>\r\n            data={data}\r\n            keys={keys}\r\n            x={getDate}\r\n            xScale={dateScale}\r\n            yScale={temperatureScale}\r\n            color={colorScale}\r\n          >\r\n            {(barStacks) =>\r\n              barStacks.map((barStack) =>\r\n                barStack.bars.map((bar) => (\r\n                  <rect\r\n                    key={`bar-stack-${barStack.index}-${bar.index}`}\r\n                    x={bar.x}\r\n                    y={bar.y}\r\n                    height={bar.height}\r\n                    width={bar.width}\r\n                    fill={bar.color}\r\n                    onClick={() => {\r\n                      if (events) alert(`clicked: ${JSON.stringify(bar)}`);\r\n                    }}\r\n                    onMouseLeave={() => {\r\n                      tooltipTimeout = window.setTimeout(() => {\r\n                        hideTooltip();\r\n                      }, 300);\r\n                    }}\r\n                    onMouseMove={(event) => {\r\n                      if (tooltipTimeout) clearTimeout(tooltipTimeout);\r\n                      const top = event.clientY - margin.top - bar.height;\r\n                      const left = bar.x + bar.width / 2;\r\n                      showTooltip({\r\n                        tooltipData: bar,\r\n                        tooltipTop: top,\r\n                        tooltipLeft: left,\r\n                      });\r\n                    }}\r\n                  />\r\n                ))\r\n              )\r\n            }\r\n          </BarStack>\r\n        </Group>\r\n        <AxisBottom\r\n          top={yMax + margin.top}\r\n          scale={dateScale}\r\n          tickFormat={formatDate}\r\n          stroke={purple3}\r\n          tickStroke={purple3}\r\n          tickLabelProps={() => ({\r\n            fill: purple3,\r\n            fontSize: 11,\r\n            textAnchor: \"middle\",\r\n          })}\r\n        />\r\n      </svg>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: margin.top / 2 - 10,\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          fontSize: \"14px\",\r\n        }}\r\n      >\r\n        <LegendOrdinal\r\n          scale={colorScale}\r\n          direction=\"row\"\r\n          labelMargin=\"0 15px 0 0\"\r\n        />\r\n      </div>\r\n\r\n      {tooltipOpen && tooltipData && (\r\n        <TooltipInPortal\r\n          key={Math.random()} // update tooltip bounds each render\r\n          top={tooltipTop}\r\n          left={tooltipLeft}\r\n          style={tooltipStyles}\r\n        >\r\n          <div style={{ color: colorScale(tooltipData.key) }}>\r\n            <strong>{tooltipData.key}</strong>\r\n          </div>\r\n          <div>{tooltipData.bar.data[tooltipData.key]}℉</div>\r\n          <div>\r\n            <small>{formatDate(getDate(tooltipData.bar.data))}</small>\r\n          </div>\r\n        </TooltipInPortal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Barstack);\r\n",["48","49"],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\index.tsx",[],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\stores\\rootStore.ts",[],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\stores\\covidStore.ts",["50","51"],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\api\\agent.ts",[],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\home\\HomePage.tsx",[],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\covid\\dashboard\\CovidDashboard.tsx",[],"E:\\Udemy-Practice\\ReactProjects\\visx-app\\src\\app\\features\\covid\\dashboard\\CovidDataList.tsx",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":115,"column":7,"nodeType":"58","messageId":"59","endLine":115,"endColumn":33},{"ruleId":"52","replacedBy":"60"},{"ruleId":"54","replacedBy":"61"},{"ruleId":"56","severity":1,"message":"62","line":6,"column":3,"nodeType":"58","messageId":"59","endLine":6,"endColumn":11},{"ruleId":"56","severity":1,"message":"63","line":94,"column":9,"nodeType":"58","messageId":"59","endLine":94,"endColumn":35},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'arrCurrentYearTimeLineData' is assigned a value but never used.","Identifier","unusedVar",["64"],["65"],"'computed' is defined but never used.","'stateInfoLst' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]